asyncapi: '2.6.0'
info:
  title: Egyptian Rat Slap Multiplayer Game WebSocket API
  version: '1.0.0'
  description: |
    This AsyncAPI document describes the WebSocket API for the online multiplayer Egyptian Rat Slap card game. It defines the socket events, their payloads, and the data structures used for real-time communication between the server and clients.

servers:
  production:
    url: wss://example.com/game
    protocol: wss
    description: Production WebSocket server for the Egyptian Rat Slap game.
  development:
    url: ws://localhost:3000
    protocol: ws
    description: Development WebSocket server for the Egyptian Rat Slap game.

defaultContentType: application/json

channels:
  connect:
    subscribe:
      operationId: onConnect
      summary: Client connects to the server.
      message:
        $ref: '#/components/messages/ConnectMessage'

  disconnect:
    subscribe:
      operationId: onDisconnect
      summary: Client disconnects from the server.
      message:
        $ref: '#/components/messages/DisconnectMessage'

  setPlayerName:
    publish:
      operationId: setPlayerName
      summary: Client sets or updates their player name in the lobby.
      message:
        $ref: '#/components/messages/SetPlayerNameMessage'

  lobbyUpdate:
    subscribe:
      operationId: onLobbyUpdate
      summary: Server updates clients with the current lobby state.
      message:
        $ref: '#/components/messages/LobbyUpdateMessage'

  joinGame:
    publish:
      operationId: joinGame
      summary: Client requests to join a specific game.
      message:
        $ref: '#/components/messages/JoinGameMessage'

  leaveGame:
    publish:
      operationId: leaveGame
      summary: Client requests to leave the current game.
      message:
        $ref: '#/components/messages/LeaveGameMessage'

  gameUpdate:
    subscribe:
      operationId: onGameUpdate
      summary: Server sends updated game state to clients.
      message:
        $ref: '#/components/messages/GameUpdateMessage'

  gameOver:
    subscribe:
      operationId: onGameOver
      summary: Server notifies clients that the game has ended.
      message:
        $ref: '#/components/messages/GameOverMessage'

  playerAction:
    publish:
      operationId: sendPlayerAction
      summary: Client sends an action they've performed in the game.
      message:
        $ref: '#/components/messages/PlayerActionMessage'

  playerActionResult:
    subscribe:
      operationId: onPlayerActionResult
      summary: Server responds with the result of the player's action.
      message:
        $ref: '#/components/messages/PlayerActionResultMessage'

  playerTimeout:
    subscribe:
      operationId: onPlayerTimeout
      summary: Server notifies that a player has timed out.
      message:
        $ref: '#/components/messages/PlayerTimeoutMessage'

  setGameSettings:
    publish:
      operationId: setGameSettings
      summary: Client updates the game settings.
      message:
        $ref: '#/components/messages/SetGameSettingsMessage'

  getGameSettings:
    publish:
      operationId: getGameSettings
      summary: Client requests the current game settings.
      message:
        $ref: '#/components/messages/GetGameSettingsMessage'

  error:
    subscribe:
      operationId: onError
      summary: Server sends an error message to the client.
      message:
        $ref: '#/components/messages/ErrorMessage'

  startVote:
    publish:
      operationId: startVote
      summary: Client initiates a vote on a topic.
      message:
        $ref: '#/components/messages/StartVoteMessage'

  submitVote:
    publish:
      operationId: submitVote
      summary: Client submits their vote.
      message:
        $ref: '#/components/messages/SubmitVoteMessage'

  voteUpdate:
    subscribe:
      operationId: onVoteUpdate
      summary: Server updates clients on the current voting state.
      message:
        $ref: '#/components/messages/VoteUpdateMessage'

components:
  messages:
    ConnectMessage:
      summary: Client connection event.
      payload:
        type: object
        description: Empty payload for connection event.

    DisconnectMessage:
      summary: Client disconnection event.
      payload:
        type: object
        description: Empty payload for disconnection event.

    SetPlayerNameMessage:
      summary: Set or update player's name.
      payload:
        $ref: '#/components/schemas/SetPlayerNamePayload'

    LobbyUpdateMessage:
      summary: Lobby state update.
      payload:
        $ref: '#/components/schemas/LobbyState'

    JoinGameMessage:
      summary: Join a specific game.
      payload:
        $ref: '#/components/schemas/JoinGamePayload'

    LeaveGameMessage:
      summary: Leave the current game.
      payload:
        type: object
        description: Empty payload for leaving a game.

    GameUpdateMessage:
      summary: Game state update.
      payload:
        $ref: '#/components/schemas/ClientGameState'

    GameOverMessage:
      summary: Notification that the game has ended.
      payload:
        $ref: '#/components/schemas/PlayerInfo'

    PlayerActionMessage:
      summary: Player performs an action.
      payload:
        $ref: '#/components/schemas/PlayerAction'

    PlayerActionResultMessage:
      summary: Result of the player's action.
      payload:
        $ref: '#/components/schemas/PlayerActionResult'

    PlayerTimeoutMessage:
      summary: Notification that a player has timed out.
      payload:
        type: object
        description: Empty payload for player timeout.

    SetGameSettingsMessage:
      summary: Update game settings.
      payload:
        $ref: '#/components/schemas/GameSettings'

    GetGameSettingsMessage:
      summary: Request current game settings.
      payload:
        type: object
        description: Empty payload for getting game settings.

    ErrorMessage:
      summary: Error message from the server.
      payload:
        $ref: '#/components/schemas/ErrorPayload'

    StartVoteMessage:
      summary: Initiate a vote on a topic.
      payload:
        $ref: '#/components/schemas/StartVotePayload'

    SubmitVoteMessage:
      summary: Submit a vote.
      payload:
        $ref: '#/components/schemas/SubmitVotePayload'

    VoteUpdateMessage:
      summary: Voting state update.
      payload:
        $ref: '#/components/schemas/VoteState'

  schemas:
    SetPlayerNamePayload:
      type: string
      description: The player's chosen display name.

    PlayerInfo:
      type: object
      description: Basic information about a player.
      properties:
        id:
          type: string
          description: Unique player identifier.
        name:
          type: string
          description: Player's display name.
      required:
        - id
        - name

    LobbyState:
      type: object
      description: Current state of the lobby.
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerInfo'
          description: List of players in the lobby.
        games:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique game identifier.
              name:
                type: string
                description: Name of the game.
              playerCount:
                type: integer
                description: Current number of players.
              maxPlayers:
                type: integer
                description: Maximum number of players allowed.
            required:
              - id
              - name
              - playerCount
              - maxPlayers
          description: List of available games.
      required:
        - players
        - games

    JoinGamePayload:
      type: object
      description: Payload to join a game.
      properties:
        gameId:
          type: string
          description: Identifier of the game to join.
        playerName:
          type: string
          description: Player's display name.
      required:
        - gameId
        - playerName

    ClientGameState:
      type: object
      description: Simplified game state sent to clients.
      properties:
        name:
          type: string
          description: Name of the game.
        pile:
          type: array
          items:
            $ref: '#/components/schemas/Card'
          nullable: true
          description: Cards currently in the pile.
        playerIds:
          type: array
          items:
            type: string
          description: List of player IDs in turn order.
        playerHandSizes:
          type: object
          additionalProperties:
            type: integer
          description: Number of cards each player has.
        playerNames:
          type: object
          additionalProperties:
            type: string
          description: Mapping of player IDs to names.
        currentPlayerId:
          type: string
          description: ID of the player whose turn it is.
        gameStarted:
          type: boolean
          description: Indicates if the game has started.
        gameOver:
          type: boolean
          description: Indicates if the game has ended.
        winner:
          $ref: '#/components/schemas/PlayerInfo'
          nullable: true
          description: Information about the winning player.
        gameSettings:
          $ref: '#/components/schemas/GameSettings'
          description: Current game settings.
        voteState:
          $ref: '#/components/schemas/VoteState'
          nullable: true
          description: Current state of any ongoing vote.
        cardChallenge:
          $ref: '#/components/schemas/CardChallenge'
          nullable: true
          description: Information about any ongoing card challenge.
      required:
        - name
        - playerIds
        - playerHandSizes
        - playerNames
        - currentPlayerId
        - gameStarted
        - gameOver
        - gameSettings

    Card:
      type: object
      description: Represents a playing card in the game.
      properties:
        id:
          type: string
          description: Unique identifier for the card.
        code:
          type: string
          description: Code representing the card (e.g., "AS" for Ace of Spades).
        suit:
          $ref: '#/components/schemas/Suit'
          description: Suit of the card.
        rank:
          $ref: '#/components/schemas/Rank'
          description: Rank of the card.
      required:
        - id
        - code
        - suit
        - rank

    Suit:
      type: string
      description: Suit of a card.
      enum:
        - hearts
        - diamonds
        - clubs
        - spades

    Rank:
      type: string
      description: Rank of a card.
      enum:
        - A
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - '10'
        - J
        - Q
        - K

    PlayerAction:
      type: object
      description: Represents an action taken by a player.
      properties:
        playerId:
          type: string
          description: ID of the player performing the action.
        actionType:
          $ref: '#/components/schemas/PlayerActionType'
          description: Type of action performed.
        timestamp:
          type: integer
          format: int64
          description: Time when the action was performed.
      required:
        - playerId
        - actionType
        - timestamp

    PlayerActionType:
      type: string
      description: Types of actions a player can perform.
      enum:
        - playCard
        - slap
        - invalidSlap
        - challengeCounterComplete
        - faceCardChallenge

    PlayerActionResult:
      type: object
      description: Result of a player's action.
      properties:
        playerId:
          type: string
          description: ID of the player.
        actionType:
          $ref: '#/components/schemas/PlayerActionType'
          description: Type of action attempted.
        result:
          type: string
          enum:
            - success
            - failure
          description: Outcome of the action.
        message:
          type: string
          nullable: true
          description: Optional message explaining the result.
        timestamp:
          type: integer
          format: int64
          description: Time when the result was determined.
      required:
        - playerId
        - actionType
        - result
        - timestamp

    GameSettings:
      type: object
      description: Configuration settings for the game.
      properties:
        minimumPlayers:
          type: integer
          description: Minimum number of players required.
        maximumPlayers:
          type: integer
          description: Maximum number of players allowed.
        slapRules:
          type: array
          items:
            $ref: '#/components/schemas/SlapRule'
          description: Array of slap rules applied in the game.
        faceCardChallengeCounts:
          type: object
          additionalProperties:
            type: integer
          description: Number of attempts for face card challenges.
        challengeCounterCards:
          type: array
          items:
            $ref: '#/components/schemas/PartialCard'
          description: Cards that can counter a challenge.
        turnTimeout:
          type: integer
          description: Time allowed for a player to take their turn.
        challengeCounterSlapTimeout:
          type: integer
          description: Time allowed for slaps after a challenge is completed.
      required:
        - minimumPlayers
        - maximumPlayers
        - slapRules
        - faceCardChallengeCounts
        - challengeCounterCards
        - turnTimeout
        - challengeCounterSlapTimeout

    SlapRule:
      type: object
      description: Defines the conditions and actions for slap events.
      properties:
        name:
          type: string
          description: Name of the slap rule.
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/ICondition'
          description: Conditions that trigger the rule.
        action:
          $ref: '#/components/schemas/SlapRuleAction'
          description: Action taken when the rule is triggered.
        targetPlayerName:
          type: string
          nullable: true
          description: Name of the targeted player, if applicable.
      required:
        - name
        - conditions
        - action

    ICondition:
      type: object
      description: Represents a condition for a slap rule.
      properties:
        field:
          $ref: '#/components/schemas/ConditionValue'
          description: Field to evaluate.
        operator:
          type: string
          enum:
            - '==='
            - '!=='
            - '>'
            - '<'
            - '>='
            - '<='
            - 'in'
          description: Operator used in the condition.
        value:
          $ref: '#/components/schemas/ConditionValue'
          description: Value to compare against.
      required:
        - field
        - operator
        - value

    ConditionValue:
      description: Value used in a condition, which can be dynamic or static.
      oneOf:
        - $ref: '#/components/schemas/IDynamicValue'
        - $ref: '#/components/schemas/IStaticValue'

    IDynamicValue:
      type: object
      description: Represents a dynamic value in a condition.
      properties:
        value:
          type: string
          description: Reference to a dynamic value.
        isDynamic:
          type: boolean
          enum: [true]
          description: Indicates the value is dynamic.
      required:
        - value
        - isDynamic

    IStaticValue:
      type: object
      description: Represents a static value in a condition.
      properties:
        value:
          oneOf:
            - type: string
            - type: integer
            - type: array
              items:
                type: string
          description: The static value.
        isDynamic:
          type: boolean
          enum: [false]
          description: Indicates the value is static.
      required:
        - value
        - isDynamic

    SlapRuleAction:
      type: string
      description: Actions resulting from slap rules.
      enum:
        - take-pile
        - skip
        - drink
        - drink-all

    PartialCard:
      type: object
      description: Partial representation of a card, used for matching purposes.
      properties:
        id:
          type: string
          nullable: true
          description: Unique identifier for the card.
        code:
          type: string
          nullable: true
          description: Code representing the card.
        suit:
          $ref: '#/components/schemas/Suit'
          nullable: true
          description: Suit of the card.
        rank:
          $ref: '#/components/schemas/Rank'
          nullable: true
          description: Rank of the card.

    ErrorPayload:
      type: string
      description: Error message detailing what went wrong.

    StartVotePayload:
      type: object
      description: Payload to initiate a vote.
      properties:
        topic:
          type: string
          description: Subject of the vote.
      required:
        - topic

    SubmitVotePayload:
      type: object
      description: Payload to submit a vote.
      properties:
        vote:
          type: boolean
          description: Player's vote (true for yes, false for no).
      required:
        - vote

    VoteState:
      type: object
      description: Current state of a vote.
      properties:
        topic:
          type: string
          description: Subject of the vote.
        votes:
          type: array
          items:
            $ref: '#/components/schemas/Vote'
          description: Array of votes cast.
        totalPlayers:
          type: integer
          description: Number of players eligible to vote.
      required:
        - topic
        - votes
        - totalPlayers

    Vote:
      type: object
      description: Represents a player's vote.
      properties:
        playerId:
          type: string
          description: ID of the player casting the vote.
        vote:
          type: boolean
          description: Player's vote.
      required:
        - playerId
        - vote

    CardChallenge:
      type: object
      description: Represents a face card challenge in the game.
      properties:
        active:
          type: boolean
          description: Indicates if a challenge is active.
        challenger:
          $ref: '#/components/schemas/PlayerInfo'
          description: Player who initiated the challenge.
        challenged:
          $ref: '#/components/schemas/PlayerInfo'
          description: Player who is being challenged.
        remainingCounterChances:
          type: integer
          description: Number of chances left to counter the challenge.
        result:
          type: string
          enum:
            - challenger
            - counter
          nullable: true
          description: Result of the challenge.
      required:
        - active
        - challenger
        - challenged
        - remainingCounterChances
